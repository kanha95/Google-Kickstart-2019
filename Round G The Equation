package codeup;


import java.util.*;
import java.io.*;

/*
Don't use HashSet ever with hashmaps. It's slow. use Arraylist with sorting or string for best results. You can also construct 
a hash of your own and use it rather using strings or arraylist.
*/


public class Solution {
  public static void main(String[] args) {
     	 
	 Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
	  
	  int t = sc.nextInt();
	  int ttt=0;
	  while(t-->0){
	  ttt++;
	  
	  int n = sc.nextInt();
	  long m = sc.nextLong();
	  
	 long[] ar = new long[n];

	 for(int i=0;i<n;i++){
	     ar[i] = sc.nextLong();	     
	 }
	
	 
	 int[] ones = new int[65];
	 int[] zeros = new int[65];
	 
	 for(int i=51;i>=0;i--) {
		 for(int j=0;j<n;j++) {
		   if( (ar[j] & (1L<<i)) > 0 ) {
			 ones[i]++;
		   }
		   else {
			 zeros[i]++;
		   }
		 }
	 }
	 
	 long ans = 0, sum=0;
	 
	 for(int i=51;i>=0;i--) {
		
		 if(ones[i]>zeros[i]) {
			 ans = ans | (1L<<i);
			 sum += (1L<<i)*zeros[i];
		 }
		 else {
			 sum += (1L<<i)*ones[i];
		 }
		 
	 }
	// System.out.println(ans+" "+sum);
	 if(sum>m) ans = -1;
	 
	 if(sum<=m) {
		 
		 for(int i=51;i>=0;i--) {
			 if( (ans & (1L<<i)) > 0) continue;
			 
			 sum = sum + (zeros[i]-ones[i])*(1L<<i);
			 if(sum<=m) {
				 ans = ans | (1L<<i);
			 }
			 else {
				 sum = sum - (zeros[i]-ones[i])*(1L<<i);
			 }
			 
		 }
	 }
	 
	 
	  
	  
	     System.out.println("Case #"+ttt+": "+ans);
	     
	  }
	  
	 
}
}
